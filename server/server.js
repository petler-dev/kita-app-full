const express = require("express");
const mysql = require("mysql2");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = mysql.createConnection({
    host: "localhost",
    user: "root",  // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ª–æ–≥–∏–Ω
    password: "",  // –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å ‚Äî –≤–≤–µ–¥–∏ –µ–≥–æ –∑–¥–µ—Å—å
    database: "kita_db",
});

db.connect((err) => {
    if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err);
        return;
    }
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MySQL!");
});

// **üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤**
app.get("/api/categories", (req, res) => {
    const sql = `
        SELECT categories.id AS categoryId, categories.name AS category, questions.id AS questionId, 
               questions.text, questions.answer, questions.comment 
        FROM categories 
        LEFT JOIN questions ON categories.id = questions.category_id
    `;

    db.query(sql, (err, results) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", err);
            res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ —É–¥–æ–±–Ω—ã–π JSON-—Ñ–æ—Ä–º–∞—Ç
        const categories = {};
        results.forEach((row) => {
            if (!categories[row.categoryId]) {
                categories[row.categoryId] = {
                    id: row.categoryId,
                    category: row.category,
                    questions: [],
                };
            }

            if (row.questionId) {
                categories[row.categoryId].questions.push({
                    id: row.questionId,
                    text: row.text,
                    answer: row.answer,
                    comment: row.comment,
                });
            }
        });

        res.json(Object.values(categories));
    });
});

// **üîπ –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞**
app.post("/api/save-answer", (req, res) => {
    const { questionId, answer } = req.body;

    const sql = "UPDATE questions SET answer = ? WHERE id = ?";
    db.query(sql, [answer, questionId], (err, result) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:", err);
            res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            return;
        }
        res.json({ message: "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω" });
    });
});

// **üîπ –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è**
app.post("/api/save-comment", (req, res) => {
    const { questionId, comment } = req.body;

    const sql = "UPDATE questions SET comment = ? WHERE id = ?";
    db.query(sql, [comment, questionId], (err, result) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
            res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            return;
        }
        res.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω" });
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(5000, () => {
    console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000");
});
